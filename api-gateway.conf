upstream service_user {
    zone zone_service_user 64k;
    server 127.0.0.1:4001;
}

upstream service_catalog {
    zone zone_service_catalog 64k;
    server localhost:4002;
}

log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

server {
    listen 4000;

    location / { return 200 '{"status":200,"message":"api gateway :D"}\n'; }

    location /user {
        # Policy configuration here (authentication, rate limiting, logging, more...)
        #
        # access_log /var/log/nginx/service_user.log main;


        # URI routing
        # location /user { proxy_pass http://service_user; }
        location /user { return 200 '{"status":200,"message":"service_user"}\n'; }

        return 404; # Catch-all
    }

    location /catalog {
        # Policy configuration here (authentication, rate limiting, logging, more...)
        #
        # access_log /var/log/nginx/service_catalog.log main;


        # URI routing
        # location /catalog { proxy_pass http://service_catalog; }
        location /catalog { return 200 '{"status":200,"message":"service_catalog"}\n'; }

        return 404; # Catch-all
    }

    proxy_intercept_errors on;     # Do not send backend errors to the client
    default_type application/json; # If no content-type then assume JSON

    error_page 400 = @400;
    location @400 { return 400 '{"status":400,"message":"Bad request"}\n'; }

    error_page 401 = @401;
    location @401 { return 401 '{"status":401,"message":"Unauthorized"}\n'; }

    error_page 403 = @403;
    location @403 { return 403 '{"status":403,"message":"Forbidden"}\n'; }

    error_page 404 = @404;
    location @404 { return 404 '{"status":404,"message":"Resource not found"}\n'; }
}

